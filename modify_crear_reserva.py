import pathlib

path = pathlib.Path(r"C:\Users\ldiaz\OneDrive - QS Technologies\Documentos\GitHub\futbolya-front\src\pages\CrearReserva.jsx")
text = path.read_text(encoding="utf-8")

state_old = "  const [horaSeleccionada, setHoraSeleccionada] = useState('');\n\n  const navigate = useNavigate();"
state_new = (
    "  const [horaSeleccionada, setHoraSeleccionada] = useState('');\n"
    "  const [cardNumber, setCardNumber] = useState('');\n"
    "  const [cardHolder, setCardHolder] = useState('');\n"
    "  const [expiryDate, setExpiryDate] = useState('');\n"
    "  const [cvc, setCvc] = useState('');\n"
    "  const [receiptEmail, setReceiptEmail] = useState('');\n\n"
    "  const navigate = useNavigate();"
)
if state_old not in text:
    raise SystemExit('state marker not found')
text = text.replace(state_old, state_new, 1)

user_old = "  const token = localStorage.getItem('token');\n  const usuario = JSON.parse(localStorage.getItem('usuario'));\n\n  //"
user_new = (
    "  const token = localStorage.getItem('token');\n  const usuario = JSON.parse(localStorage.getItem('usuario'));\n\n  useEffect(() => {\n    if (!usuario) {\n      return;\n    }\n    setCardHolder(usuario.nombre || '');\n    setReceiptEmail(usuario.Correo || '');\n  }, [usuario]);\n\n  //"
)
if user_old not in text:
    raise SystemExit('user marker not found')
text = text.replace(user_old, user_new, 1)

fetch_block = (
    "  const fetchCanchasDisponibles = async (id, fechaHora) => {\n"
    "    try {\n"
    "      const res = await fetch(\n"
    "        `https://localhost:7055/api/Canchas/de/${id}/disponibles?fechaHora=${fechaHora}`\n"
    "      );\n"
    "      const data = await res.json();\n"
    "      setCanchas(data || []); // solo las libres entran ac�\n"
    "    } catch (error) {\n"
    "      console.error('Error al obtener canchas disponibles:', error);\n"
    "    }\n"
    "  };\n\n"
)
helpers = (
    "  const formatCardNumber = (value) => {\n"
    "    const digits = value.replace(/\\D/g, '').slice(0, 16);\n"
    "    return digits.replace(/(\\d{4})(?=\\d)/g, '$1 ');\n"
    "  };\n\n"
    "  const formatExpiry = (value) => {\n"
    "    const digits = value.replace(/\\D/g, '').slice(0, 4);\n"
    "    if (digits.length >= 3) {\n"
    "      return `${digits.slice(0, 2)}/${digits.slice(2)}`;\n"
    "    }\n"
    "    return digits;\n"
    "  };\n\n"
    "  const handleCardNumberChange = (event) => {\n"
    "    setCardNumber(formatCardNumber(event.target.value));\n"
    "  };\n\n"
    "  const handleExpiryChange = (event) => {\n"
    "    setExpiryDate(formatExpiry(event.target.value));\n"
    "  };\n\n"
    "  const handleCvcChange = (event) => {\n"
    "    const digits = event.target.value.replace(/\\D/g, '').slice(0, 4);\n"
    "    setCvc(digits);\n"
    "  };\n\n"
    "  const isExpiryValid = (value) => {\n"
    "    const [month, year] = value.split('/');\n"
    "    if (!month || !year || value.length !== 5) {\n"
    "      return false;\n"
    "    }\n"
    "    const monthNumber = parseInt(month, 10);\n"
    "    if (Number.isNaN(monthNumber) || monthNumber < 1 || monthNumber > 12) {\n"
    "      return false;\n"
    "    }\n"
    "    return true;\n"
    "  };\n\n"
    "  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n"
    "  const isCardDataValid = () => {\n"
    "    const digits = cardNumber.replace(/\\s/g, '');\n"
    "    return cardHolder.trim().length >= 3 && digits.length === 16;\n"
    "  };\n\n"
    "  const isSecurityValid = () =>\n"
    "    isExpiryValid(expiryDate) && (cvc.length === 3 || cvc.length === 4);\n\n"
    "  const isReceiptEmailValid = () => emailRegex.test(receiptEmail);\n\n"
    "  const isPaymentValid = () =>\n"
    "    isCardDataValid() && isSecurityValid() && isReceiptEmailValid();\n\n"
)
if fetch_block not in text:
    raise SystemExit('fetch block not found')
text = text.replace(fetch_block, fetch_block + helpers, 1)

old_handle = "const handleSubmit = async () => {\n  // Convertir la fecha/hora seleccionada a objeto Date\n  const fechaSeleccionada = new Date(`${diaSeleccionado}T${horaSeleccionada}:00`);\n\n  const payload = {\n    canchaId: parseInt(canchaId),\n    fechaHora: fechaSeleccionada.toISOString(),\n    observaciones,\n    clienteNombre: usuario.nombre,\n    clienteTelefono: usuario.telefono || 'No informado',\n    clienteEmail: usuario.Correo,\n    estadoPago: 'pendiente',\n    esFrecuente: false\n  };\n\n  try {\n    const res = await fetch('https://localhost:7055/api/Reservas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!res.ok) {\n      const err = await res.text();\n      alert(`Error: ${err}`);\n      return;\n    }\n\n    alert('Reserva creada correctamente');\n    navigate('/home');\n  } catch (error) {\n    console.error('Error al crear reserva:', error);\n  }\n};\n\n\n\n  \n"

new_handle = (
    "const handleSubmit = async () => {\n  if (!isPaymentValid()) {\n    alert('Completa los datos de pago para confirmar la reserva.');\n    return;\n  }\n\n  // Convertir la fecha/hora seleccionada a objeto Date\n  const fechaSeleccionada = new Date(`${diaSeleccionado}T${horaSeleccionada}:00`);\n\n  const payload = {\n    canchaId: parseInt(canchaId),\n    fechaHora: fechaSeleccionada.toISOString(),\n    observaciones,\n    clienteNombre: usuario.nombre,\n    clienteTelefono: usuario.telefono || 'No informado',\n    clienteEmail: usuario.Correo,\n    estadoPago: 'pendiente',\n    esFrecuente: false\n  };\n\n  try {\n    const res = await fetch('https://localhost:7055/api/Reservas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!res.ok) {\n      const err = await res.text();\n      alert(`Error: ${err}`);\n      return;\n    }\n\n    alert('Reserva creada correctamente');\n    navigate('/home');\n  } catch (error) {\n    console.error('Error al crear reserva:', error);\n  }\n};\n\n\n\n"
)
if old_handle not in text:
    raise SystemExit('handleSubmit block not found')
text = text.replace(old_handle, new_handle, 1)

old_paso = "  const PasoConfirmar = () => (\n    <div>\n      <h3>Confirmar reserva</h3>\n      <p><b>Establecimiento:</b> {establecimientos.find(e => e.id === parseInt(establecimientoId))?.nombre}</p>\n      <p><b>Fecha y hora:</b> {fechaHora}</p>\n      <p><b>Cancha:</b> {canchas.find(c => c.id === parseInt(canchaId))?.nombre}</p>\n      <textarea\n        placeholder=\"Observaciones\"\n        value={observaciones}\n        onChange={(e) => setObservaciones(e.target.value)}\n      />\n      <div className=\"nav-buttons\">\n        <button className=\"btn-back\" onClick={() => setStep(3)}>← Atrás</button>\n        <button className=\"btn-confirm\" onClick={handleSubmit}>Confirmar ✅</button>\n      </div>\n    </div>\n  );\n\n"

new_paso = (
"  const PasoConfirmar = () => {\n"
"    const establecimientoSeleccionado = establecimientos.find((e) => e.id === parseInt(establecimientoId, 10));\n"
"    const canchaSeleccionada = canchas.find((c) => c.id === parseInt(canchaId, 10));\n"
"    const cardDigits = cardNumber.replace(/\\s/g, '');\n"
"    const maskedCard = cardDigits\n"
"      ? `**** **** **** ${cardDigits.slice(-4)}`\n"
"      : 'Completa la tarjeta';\n\n"
"    return (\n"
"      <div>\n"
"        <h3>Confirmar reserva</h3>\n"
"        <p><b>Establecimiento:</b> {establecimientoSeleccionado?.nombre}</p>\n"
"        <p><b>Fecha y hora:</b> {fechaHora}</p>\n"
"        <p><b>Cancha:</b> {canchaSeleccionada?.nombre}</p>\n"
"        <textarea\n"
"          placeholder=\"Observaciones\"\n"
"          value={observaciones}\n"
"          onChange={(event) => setObservaciones(event.target.value)}\n"
"        />\n"
"        <div className=\"payment-section\">\n"
"          <h4>Datos de pago</h4>\n"
"          <div className=\"payment-panel\">\n"
"            <div className=\"payment-fields\">\n"
"              <label>\n"
"                Titular de la tarjeta\n"
"                <input\n"
"                  type=\"text\"\n"
"                  className=\"payment-input\"\n"
"                  value={cardHolder}\n"
"                  onChange={(event) => setCardHolder(event.target.value)}\n"
"                  placeholder=\"Como figura en la tarjeta\"\n"
"                  autoComplete=\"cc-name\"\n"
"                />\n"
"              </label>\n"
"              <label>\n"
"                Numero de tarjeta\n"
"                <input\n"
"                  type=\"text\"\n"
"                  inputMode=\"numeric\"\n"
"                  className=\"payment-input\"\n"
"                  value={cardNumber}\n"
"                  onChange={handleCardNumberChange}\n"
"                  placeholder=\"1234 5678 9012 3456\"\n"
"                  autoComplete=\"cc-number\"\n"
"                  maxLength={19}\n"
"                />\n"
"              </label>\n"
"            </div>\n"
"            <div className=\"payment-fields payment-fields--split\">\n"
"              <label>\n"
"                Vencimiento\n"
"                <input\n"
"                  type=\"text\"\n"
"                  inputMode=\"numeric\"\n"
"                  className=\"payment-input\"\n"
"                  value={expiryDate}\n"
"                  onChange={handleExpiryChange}\n"
"                  placeholder=\"MM/AA\"\n"
"                  autoComplete=\"cc-exp\"\n"
"                  maxLength={5}\n"
"                />\n"
"              </label>\n"
"              <label>\n"
"                CVC\n"
"                <input\n"
"                  type=\"text\"\n"
"                  inputMode=\"numeric\"\n"
"                  className=\"payment-input\"\n"
"                  value={cvc}\n"
"                  onChange={handleCvcChange}\n"
"                  placeholder=\"123\"\n"
"                  autoComplete=\"cc-csc\"\n"
"                  maxLength={4}\n"
"                />\n"
"              </label>\n"
"            </div>\n"
"            <div className=\"payment-fields\">\n"
"              <label>\n"
"                Email para comprobante\n"
"                <input\n"
"                  type=\"email\"\n"
"                  className=\"payment-input\"\n"
"                  value={receiptEmail}\n"
"                  onChange={(event) => setReceiptEmail(event.target.value)}\n"
"                  placeholder=\"nombre@correo.com\"\n"
"                  autoComplete=\"email\"\n"
"                />\n"
"              </label>\n"
"            </div>\n"
"            <div className=\"payment-summary\">\n"
"              <p>\n"
"                <span>Tarjeta:</span> {maskedCard}\n"
"              </p>\n"
"              <p>\n"
"                <span>Titular:</span> {cardHolder || 'Sin completar'}\n"
"              </p>\n"
"              <p>\n"
"                <span>Vencimiento:</span> {expiryDate || 'Sin completar'}\n"
"              </p>\n"
"            </div>\n"
"          </div>\n"
"        </div>\n"
"        <div className=\"nav-buttons\">\n"
"          <button className=\"btn-back\" onClick={() => setStep(3)}>Atras</button>\n"
"          <button\n"
"            className=\"btn-confirm\"\n"
"            onClick={handleSubmit}\n"
"            disabled={!isPaymentValid()}\n"
"          >\n"
"            Confirmar pago\n"
"          </button>\n"
"        </div>\n"
"      </div>\n"
"    );\n"
"  };\n\n"
)
if old_paso not in text:
    raise SystemExit('PasoConfirmar block not found')
text = text.replace(old_paso, new_paso, 1)

path.write_text(text, encoding="utf-8")
